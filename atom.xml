<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Zen Slapped]]></title>
  <link href="http://www.tomakehurst.com/atom.xml" rel="self"/>
  <link href="http://www.tomakehurst.com/"/>
  <updated>2014-05-10T20:59:19+01:00</updated>
  <id>http://www.tomakehurst.com/</id>
  <author>
    <name><![CDATA[Tom Akehurst]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Microservices and monoliths - is there a third way?]]></title>
    <link href="http://www.tomakehurst.com/microservices-and-monoliths-is-there-a-third-way"/>
    <updated>2014-05-10T12:00:00+01:00</updated>
    <id>http://www.tomakehurst.com/microservices-and-monoliths-is-there-a-third-way</id>
    <content type="html"><![CDATA[<p><strong>TL;DR:</strong> Microservices vs. monolith is a false dichotomy.</p>

<p>Microservices are gaining a lot of interest at the moment as an antidote to the limitations of monolithic application architecture. But as with all things in software (and life in general) they come at a significant cost. Arguably, monoliths and microservices occupy extreme points in a design space, and I&rsquo;ve recently been wondering about other strategies that could yield similar benefits but with different tradeoffs.</p>

<!-- more -->


<h2>Essentials</h2>

<p>Microservices are independently deployable, which means (provided other design constraints are met) that teams can ship new features independently from one another, avoiding the coordination cost associated with merging code into a single artefact. Services should be single purpose (and therefore have only one reason at a time to change), so the release of feature A should never be delayed while feature B is still in progress.</p>

<p>Splitting system components into separate processes that can only communicate via a network forces a greater degree of decoupling than is typical between components within a monolith. Rich Hickey commented in a presentation (which I can&rsquo;t find now, annoyingly) that microservices encourage component interfaces based on immutable data with pass-by-value semantics, which is impossible to achieve in most languages (Clojure being an exception) other than by self-imposed discipline. An avoidance of shared state (e.g. two services accessing the same DB schema) reinforces this separation.</p>

<p>This decoupling enables much greater freedom in technology choices. Services with APIs based entirely on platform-agnostic standards such as HTTP and JSON can be replaced transparently with something based on an totally different tech stack. So when you&rsquo;ve passed Peak NodeJS and want to move onto the next big thing, you can manage the transition incrementally rather doing a total re-write (which you should <a href="http://www.joelonsoftware.com/articles/fog0000000069.html">Never Do</a>, right?).</p>

<p>Finally, microservices are by default more operationally transparent than modules within a monolith. Of course it&rsquo;s possible to instrument and monitor individual components in a single app, but it&rsquo;s not common practice to do so and it requires explicit effort. By comparison, services that communicate via HTTP or messaging give away plenty of operational data (log files, messages on a topic etc.) for free.</p>

<h2>Tradeoffs</h2>

<p>Benjamin Wootton&rsquo;s post <a href="http://contino.co.uk/blog/2013/03/31/microservices-no-free-lunch.html">&ldquo;Microservices &ndash; Not a free lunch!&rdquo;</a> does a good job of explaining the additional costs of a microservice architecture, so I&rsquo;ll merely summarise the points I think are relevant.</p>

<p>Systems distributed via a network are subject to high latency and numerous failure modes absent when in-process. While some degree of distribution is inevitable in modern applications, microservices could be said to be <em>maximally distributed</em>, so these issues have to be considered for practically every bit of behaviour, even where there&rsquo;s no benefit in terms of scaling or resilience.</p>

<p>A corollary of the prevous point is that all (or most) service interactions should be asynchronous if you want to build a high performing and available system. However, async programming is hard, and even harder to test effectively. Asynchronous systems are more likely to develop <a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.35.7368&amp;rep=rep1&amp;type=pdf">emergent behaviours</a> that are near impossible to predict or test for, and that will almost certainly burn you in production at some point.</p>

<p>Tolerating high and unpredicatable latency in practice usually means exposing coarse-grained APIs, which isn&rsquo;t always ideal.</p>

<p>Finally, moving features between services is far more costly than between modules in a single program, particularly if those services were built on different technologies.</p>

<p>There are some other technologies that appear to exhibit at least some of the benefits described above, while potentially mitigating some of the problems. I&rsquo;ll caveat by saying that I&rsquo;ve never built or run anything with these, so I can&rsquo;t personally vouch for whether they live up to their marketing!</p>

<h2>Erlang</h2>

<p><a href="http://martinfowler.com/articles/microservices.html">Martin Fowler&rsquo;s microservices article</a> mentions in passing similarities to <a href="http://www.erlang.org/">Erlang</a>. Erlang supports hot code swapping, inter-process communication via asynchronous message passing and distribution over a network. This ticks many of the same boxes as microservices &ndash; independently deployable components, component boundaries enforced by immutable, data-centric communication protocols, no shared state.</p>

<p>A big additional advantage is that (many) processes can be physically co-located, avoiding the pain of distribution when it isn&rsquo;t required. Even when it is, Erlang OTP provides a good base for building in graceful failure recovery.</p>

<p>Erlang&rsquo;s model is of a much lower level of abstraction than a typical microservice&rsquo;s, however. It imposes no inter-process messaging semantics beyond async, immutable message passing, whereas microservices are often resource-oriented (i.e. HTTP). As a result, an Erlang based system would have no more natural transparency than a typical monolith.</p>

<p>There are both benefits and drawbacks to targetting a single platform like Erlang. Clearly, this makes refactoring much easier, but on the other hand you are constrained to a single set of languages, programming models and runtime characteristics which might be rendered obsolete (or suboptimal at least) when something radically different comes along.</p>

<h2>NetKernel</h2>

<p><a href="http://1060research.com/products">NetKernel</a> is a less well known but nonetheless very interesting option in this space. It bills itself as a &ldquo;Uniform Resource Engine&rdquo; and is the result of a piece of research on the web and the reasons for its outstanding success (in a somewhat similar vein to Roy Fielding&rsquo;s work on REST).</p>

<p>Systems are built on NetKernel by composing resources exposed by modules. Resources are addressed (and address each other) via what could be considered a superset of HTTP. A killer feature that this enables is highy efficient caching &ndash; since relationships between resources are transparent to NetKernel, it can walk the dependency graph when a resource&rsquo;s state changes and invalidate cache entries where necessary (implying that state can otherwise be cached indefinitely). An additional benefit is that NetKernel can surface that transparency to system administrators, and provides various visualisations for things like resource utilisation and call paths.</p>

<p>NetKernel modules are hot deployable and as with Erlang, many can be co-located on the same host, making independent releases a possibility while not forcing maximal distribution to achieve it. In-process communication can be done synchronously, alleviating the overhead of going fully async. However, NetKernel can be run distributed, communicating via a custom network protocol that preserves cache coherence between nodes.</p>

<p>Like with Erlang, NetKernel limits you the the languages and APIs of a single platform, in this case the JVM, with all the benefits and drawbacks that implies.</p>

<p><a href="http://durablescope.blogspot.co.uk/2014/05/why-microservices-and-not-yoctoservices.html">&ldquo;Why Microservices and not Yoctoservices?&rdquo;</a> is a thoughtful post from one of NetKernel&rsquo;s creators on the problems of service sizing and the solutions offered by resource oriented computing.</p>

<h2>Others?</h2>

<p>I considered including <a href="http://www.osgi.org/Technology/WhatIsOSGi">OSGi</a> in this post due to its support for hot deployable modules into a single process. However, intra-module communication is via direct calls between objects, which fails the decoupling test in my opinion. Also nobody I&rsquo;ve spoken to with practical experience of OSGi has a good word to say about it.</p>

<p>Containers (e.g. <a href="https://www.docker.io/">Docker</a>) and container-based PaaS products (e.g. <a href="http://cloudfoundry.org/">Cloud Foundry</a> and <a href="https://www.openshift.com/">OpenShift</a>) are on the rise as a solution for hosting microservices. Perhaps (and I&rsquo;m speculating wildly now) some of these will evolve to support service locality awareness, such that services could choose to expose synchronous, fine grained APIs to co-located clients with reduced error handling requirements.</p>

<h2>Conclusion</h2>

<p>The debate around microservices is yielding valuable insights about how we build sustainable and scalable systems. I hope over time these will give rise to a more nuanced range of solutions than the current monolith vs. microservices dichotomy, much like the NoSQL movement did for data persistence.</p>

<p>Many thanks to Matthew Skelton, Peter Rodgers and Rob Elliot for helping me improve this post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[All-in-one test environments with JUnit]]></title>
    <link href="http://www.tomakehurst.com/all-in-one-test-environments-with-junit"/>
    <updated>2014-02-09T13:19:50+00:00</updated>
    <id>http://www.tomakehurst.com/all-in-one-test-environments-with-junit</id>
    <content type="html"><![CDATA[<p>A major benefit of building on the JVM is the wide range of infrastructure built natively for it. Combined with first-class support for threading this allows entire scaled-down environments to be run in-memory for testing. There are numerous advantages to this, including:</p>

<ul>
<li>Faster feedback</li>
<li>Consistent environment across the team</li>
<li>Easy debugging &ndash; set breakpoints anywhere in the stack</li>
<li>Write and run integration tests for your adapters (as in <a href="http://www.natpryce.com/articles/000772.html">Ports and Adapters</a>) without needing a full environment</li>
</ul>


<!-- more -->


<p>I&rsquo;ve been regularly testing apps against <a href="http://hsqldb.org/">HSQL</a> and <a href="http://www.h2database.com/">H2</a> for quite a while, and <a href="http://wiremock.org/">WireMock</a> was built specifically to provide in-memory REST services to test against. More recently I&rsquo;ve been running <a href="http://cassandra.apache.org/">Cassandra</a>, <a href="http://zookeeper.apache.org/">Zookeeper</a> and <a href="https://kafka.apache.org/">Kafka</a> (all Apache projects) in-situ with my apps. Virtually everything I&rsquo;ve built over the last
couple of years has been on top of <a href="http://dropwizard.io">Dropwizard</a>, which fits well with this model given its embedded web server and relatively quick startup time.</p>

<p>JUnit rules are an extremely handy way of managing environment components. For the unfamiliar, JUnit rule classes allow you to abstract away code you might otherwise put in your <code>@BeforeClass</code>, <code>@AfterClass</code>, <code>@Before</code> and <code>@After</code> methods. Most (all?) environment components are essentially daemons that need to be started, stopped and sometimes reset at the right moments, so rules are ideal wrappers to manage this lifecycle.</p>

<p>WireMock and Dropwizard ship with rule implementations, so including them in your setup is as simple as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Rule</span>
</span><span class='line'><span class="kd">public</span> <span class="n">WireMockRule</span> <span class="n">wireMockRule</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WireMockRule</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>and</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@ClassRule</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">DropwizardAppRule</span><span class="o">&lt;</span><span class="n">MyAppConfiguration</span><span class="o">&gt;</span> <span class="n">RULE</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">new</span> <span class="n">DropwizardAppRule</span><span class="o">&lt;&gt;(</span><span class="n">MyApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span><span class='line'>                            <span class="s">&quot;/path/to/testconfig.yaml&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>For tools that don&rsquo;t come with their own rules, creating them can be achieved by subclassing JUnit&rsquo;s ExternalResource class e.g.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SomeHipDbRule</span> <span class="kd">extends</span> <span class="n">ExternalResource</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">SomeHipDb</span> <span class="n">db</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HipDb</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">db</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
</span><span class='line'>        <span class="n">db</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">after</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">db</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I find it useful to hang test utility methods here too e.g.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">clearData</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="na">deleteAllData</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">createSchema</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="na">createSchema</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you have many more than a couple of components in your environment, the number of rules required can become a bit unwieldy. Also, including each rule as a class field as in the above examples gives you no control over the order in which they&rsquo;re evaluated, which can be a problem if there are dependencies between the components (e.g. Kafka requires a Zookeeper server). JUnit&rsquo;s RuleChain solves both of these problems. On my current project we&rsquo;ve created an &ldquo;environment&rdquo; class, also a test rule, which composes the individual components and imposes a specific ordering. This looks a bit like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyTestEnvironment</span> <span class="kd">implements</span> <span class="n">TestRule</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">RuleChain</span> <span class="n">ruleChain</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">RuleChain</span><span class="o">.</span><span class="na">outerRule</span><span class="o">(</span><span class="k">new</span> <span class="n">ZookeeperRule</span><span class="o">())</span>
</span><span class='line'>                 <span class="o">.</span><span class="na">around</span><span class="o">(</span><span class="k">new</span> <span class="n">KafkaRule</span><span class="o">())</span>
</span><span class='line'>                 <span class="o">.</span><span class="na">around</span><span class="o">(</span><span class="k">new</span> <span class="n">HipDbRule</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Statement</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Statement</span> <span class="n">base</span><span class="o">,</span> <span class="n">Description</span> <span class="n">description</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ruleChain</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">base</span><span class="o">,</span> <span class="n">description</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Gotchas</h2>

<p>Many libraries aren&rsquo;t built with this kind of usage in mind, so a little bit of extra complexity is sometimes required. Issues I&rsquo;ve encountered are:</p>

<p>Cassandra manages some state in static variables, meaning that it survives restarts inside a single JVM. We worked around this by only starting Cassandra once per test run (by making the Cassandra server a static member of the rule and only starting it if it&rsquo;s not already running).</p>

<p>You&rsquo;ll be pulling lots of extra dependencies, and there will inevitably be clashes. I&rsquo;ve been making heavy use of <code>mvn dependency:tree</code> while working on this. I&rsquo;d like to find a good way to do cross-platform JVM forking as a solution to this and the previous point.</p>

<p>Where one service depends on another and startup happens on a background thread it&rsquo;s possible to start in a bad state. Polling and sleeps are often adequate if not great solutions to this.</p>

<p>Some servers have large or volatile startup times. I&rsquo;ve found that the Kafka + Zookeeper combination can take between 10 seconds and over minute to stabilise, which makes it hard to get into a TDD groove.</p>

<p>The more services you run in your environment, the greater the risk they&rsquo;ll try to bind to port numbers already in use. To counter this I try to ensure that random, free ports are selected for each service then make sure the port numbers are accessible via the rule so that they can be passed to the app under test. Some libraries let you pass a 0 as the port number parameter and then select a free port for you. Where this isn&rsquo;t possible, you can do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ServerSocket</span> <span class="n">socket</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ServerSocket</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">freePort</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="na">getLocalPort</span><span class="o">();</span>
</span><span class='line'><span class="n">socket</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="n">MyService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyService</span><span class="o">(</span><span class="n">freePort</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Despite these obstacles I&rsquo;ve found that the ability to run an embedded test environment is a valuable addition to a project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing WireMock – an HTTP service stubbing library]]></title>
    <link href="http://www.tomakehurst.com/introducing-wiremock-an-http-service-stubbing-library"/>
    <updated>2012-08-18T13:14:45+01:00</updated>
    <id>http://www.tomakehurst.com/introducing-wiremock-an-http-service-stubbing-library</id>
    <content type="html"><![CDATA[<p><a href="http://wiremock.org">WireMock</a> is a tool that allows HTTP exchanges to be stubbed and verified. It does this by creating an actual HTTP endpoint, rather than by stubbing or mocking the HTTP client class. It can be used directly from within JUnit (or your weapon of choice), run as a standalone process or deployed into a container with the aim of covering off a wide range of testing scenarios. It has a JSON API so you don&rsquo;t have to be working in JVM language to make use of it, although there is a also a fluent
Java API available if you are.</p>

<!-- more -->


<p>Other handy stuff it&rsquo;ll do includes conditional forwarding of requests to other services (enabling proxy/intercept), record/playback of stubs, fault injection, stateful behaviour and response delays.</p>

<h2>Unit testing</h2>

<p>While it&rsquo;s possible to mock your HTTP client for unit testing with something like JMock or Mockito, I&rsquo;ve found this to be problematic in practice. For example, how will my code cope with a 503 response? What if the Content-Type header doesn&rsquo;t match the body? Does it follow redirects (or not) as expected? Using mock objects, you have to attempt to figure out how your client will react to each of these scenarios and replicate this in your mock/stub setup. Given HTTP&rsquo;s complexity, it&rsquo;s
pretty likely you&rsquo;ll get some of it wrong. This is really just an example of why you <a href="http://www.mockobjects.com/2007/04/test-smell-everything-is-mocked.html">shouldn&rsquo;t mock types you don&rsquo;t own</a>.</p>

<p>Writing unit tests with WireMock is very straightforward using the fluent Java API. If using JUnit 4.x a @Rule can be added to your test to manage the startup, shutdown and reset of the server between tests.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Rule</span>
</span><span class='line'><span class="kd">public</span> <span class="n">WireMockRule</span> <span class="n">wireMockRule</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WireMockRule</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">exampleTest</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">stubFor</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="n">urlEqualTo</span><span class="o">(</span><span class="s">&quot;/my/resource&quot;</span><span class="o">))</span>
</span><span class='line'>        <span class="o">.</span><span class="na">withHeader</span><span class="o">(</span><span class="s">&quot;Accept&quot;</span><span class="o">,</span> <span class="n">equalTo</span><span class="o">(</span><span class="s">&quot;text/plain&quot;</span><span class="o">))</span>
</span><span class='line'>           <span class="o">.</span><span class="na">willReturn</span><span class="o">(</span><span class="n">aResponse</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">withStatus</span><span class="o">(</span><span class="mi">200</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">withHeader</span><span class="o">(</span><span class="s">&quot;Content-Type&quot;</span><span class="o">,</span> <span class="s">&quot;text/plain&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">withBody</span><span class="o">(</span><span class="s">&quot;Some content&quot;</span><span class="o">)));</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">Result</span> <span class="n">result</span> <span class="o">=</span> <span class="n">myHttpServiceCallingObject</span><span class="o">.</span><span class="na">doSomething</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">assertTrue</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">wasSuccessFul</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">verify</span><span class="o">(</span><span class="n">postRequestedFor</span><span class="o">(</span><span class="n">urlMatching</span><span class="o">(</span><span class="s">&quot;/my/resource/[a-z0-9]+&quot;</span><span class="o">))</span>
</span><span class='line'>        <span class="o">.</span><span class="na">withRequestBody</span><span class="o">(</span><span class="n">matching</span><span class="o">(</span><span class="s">&quot;.*1234.*&quot;</span><span class="o">))</span>
</span><span class='line'>        <span class="o">.</span><span class="na">withHeader</span><span class="o">(</span><span class="s">&quot;Content-Type&amp;&quot;</span><span class="o">,</span> <span class="n">notMatching</span><span class="o">(</span><span class="s">&quot;application/json&quot;</span><span class="o">)));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Integrated testing</h2>

<p>When testing an application end to end, I&rsquo;ve found HTTP stubbing to be immensely useful. The real web services we typically have to integrate with are often slow, unreliable, unavailable in certain environments, or won&rsquo;t support automated creation of test data. Also, it&rsquo;s usually difficult to generate error responses on-demand. A consequence of these issues that I&rsquo;ve often observed is that tests at this level only cover happy paths and are very non-specific in their assertions.</p>

<p>Running all your acceptance tests against real services all the time tends to be very slow, and personally I tend to agree with Dan Bodart&rsquo;s view that <a href="http://dan.bodar.com/2012/02/28/crazy-fast-build-times-or-when-10-seconds-starts-to-make-you-nervous/">the value of tests decreases rapidly as their execution time increases</a>.</p>

<p>WireMock supports a variety of integrated testing scenarios. It can be started as a standalone process and have stubs configured via a JSON API (file and HTTP based). It can also be wrapped up in a WAR file if you&rsquo;d prefer to deploy it into an existing web container.</p>

<p>Starting WireMock standalone is as simple as this:</p>

<p>java -jar wiremock-1.24-standalone.jar</p>

<p>Then you can add some stubs via the JSON API (file or HTTP):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;request&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;method&quot;</span><span class="p">:</span> <span class="s2">&quot;GET&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;urlPattern&quot;</span><span class="p">:</span> <span class="s2">&quot;/some/resource/\d+&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;response&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;status&quot;</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;body&quot;</span><span class="p">:</span> <span class="s2">&quot;Some content&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>More details are available on Github: <a href="https://github.com/tomakehurst/wiremock.">https://github.com/tomakehurst/wiremock.</a> Java artifacts are available in the Maven central repo.</p>
]]></content>
  </entry>
  
</feed>
