<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Testing | Zen Slapped]]></title>
  <link href="http://tomakehurst.com/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://tomakehurst.com/"/>
  <updated>2014-02-10T20:07:05+00:00</updated>
  <id>http://tomakehurst.com/</id>
  <author>
    <name><![CDATA[Tom Akehurst]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[All-in-one test environments with JUnit]]></title>
    <link href="http://tomakehurst.com/blog/2014/02/09/all-in-one-test-environments-with-junit/"/>
    <updated>2014-02-09T13:19:50+00:00</updated>
    <id>http://tomakehurst.com/blog/2014/02/09/all-in-one-test-environments-with-junit</id>
    <content type="html"><![CDATA[<p>A major benefit of building on the JVM is the wide range of infrastructure built natively for it. Combined with first-class support for threading this allows entire scaled-down environments to be run in-memory for testing. There are numerous advantages to this, including:</p>

<ul>
<li>Faster feedback</li>
<li>Consistent environment across the team</li>
<li>Easy debugging &ndash; set breakpoints anywhere in the stack</li>
<li>Write and run integration tests for your adapters (as in <a href="http://www.natpryce.com/articles/000772.html">Ports and Adapters</a>) without needing a full environment</li>
</ul>


<!-- more -->


<p>I&rsquo;ve been regularly testing apps against <a href="http://hsqldb.org/">HSQL</a> and <a href="http://www.h2database.com/">H2</a> for quite a while, and <a href="http://wiremock.org/">WireMock</a> was built specifically to provide in-memory REST services to test against. More recently I&rsquo;ve been running <a href="http://cassandra.apache.org/">Cassandra</a>, <a href="http://zookeeper.apache.org/">Zookeeper</a> and <a href="https://kafka.apache.org/">Kafka</a> (all Apache projects) in-situ with my apps. Virtually everything I&rsquo;ve built over the last
couple of years has been on top of <a href="http://dropwizard.io">Dropwizard</a>, which fits well with this model given its embedded web server and relatively quick startup time.</p>

<p>JUnit rules are an extremely handy way of managing environment components. For the unfamiliar, JUnit rule classes allow you to abstract away code you might otherwise put in your <code>@BeforeClass</code>, <code>@AfterClass</code>, <code>@Before</code> and <code>@After</code> methods. Most (all?) environment components are essentially daemons that need to be started, stopped and sometimes reset at the right moments, so rules are ideal wrappers to manage this lifecycle.</p>

<p>WireMock and Dropwizard ship with rule implementations, so including them in your setup is as simple as:</p>

<p><code>java
@Rule
public WireMockRule wireMockRule = new WireMockRule();
</code>
and</p>

<p>```java
@ClassRule
public static DropwizardAppRule<MyAppConfiguration> RULE =
  new DropwizardAppRule&lt;>(MyApplication.class,</p>

<pre><code>                        "/path/to/testconfig.yaml");
</code></pre>

<p>```
For tools that don&rsquo;t come with their own rules, creating them can be achieved by subclassing JUnit&rsquo;s ExternalResource class e.g.</p>

<p>```java
public class SomeHipDbRule extends ExternalResource {</p>

<pre><code>private SomeHipDb db = new HipDb();

@Override
protected void before() throws Throwable {
    db.init();
    db.start();
}

@Override
protected void after() {
    db.shutdown();
}
</code></pre>

<p>}
```</p>

<p>I find it useful to hang test utility methods here too e.g.</p>

<p>```java</p>

<pre><code>public void clearData() {
    db.deleteAllData();
}

public void createSchema(String name) {
    db.createSchema(name);
}
</code></pre>

<p>```</p>

<p>If you have many more than a couple of components in your environment, the number of rules required can become a bit unwieldy. Also, including each rule as a class field as in the above examples gives you no control over the order in which they&rsquo;re evaluated, which can be a problem if there are dependencies between the components (e.g. Kafka requires a Zookeeper server). JUnit&rsquo;s RuleChain solves both of these problems. On my current project we&rsquo;ve created an &ldquo;environment&rdquo; class, also a test rule, which composes the individual components and imposes a specific ordering. This looks a bit like this:</p>

<p>```java
public class MyTestEnvironment implements TestRule {</p>

<pre><code>private final RuleChain ruleChain =
    RuleChain.outerRule(new ZookeeperRule())
             .around(new KafkaRule())
             .around(new HipDbRule());

@Override
public Statement apply(Statement base, Description description) {
    return ruleChain.apply(base, description);
}
</code></pre>

<p>}
```</p>

<h2>Gotchas</h2>

<p>Many libraries aren&rsquo;t built with this kind of usage in mind, so a little bit of extra complexity is sometimes required. Issues I&rsquo;ve encountered are:</p>

<p>Cassandra manages some state in static variables, meaning that it survives restarts inside a single JVM. We worked around this by only starting Cassandra once per test run (by making the Cassandra server a static member of the rule and only starting it if it&rsquo;s not already running).</p>

<p>You&rsquo;ll be pulling lots of extra dependencies, and there will inevitably be clashes. I&rsquo;ve been making heavy use of <code>mvn dependency:tree</code> while working on this. I&rsquo;d like to find a good way to do cross-platform JVM forking as a solution to this and the previous point.</p>

<p>Where one component depends on another and startup happens on a background thread it&rsquo;s possible to start in a bad state. Polling and sleeps are often adequate if not great solutions to this.</p>

<p>Some servers have large or volatile startup times. I&rsquo;ve found that the Kafka + Zookeeper combination can take between 10 seconds and over minute to stabilise, which makes it hard to get into a TDD groove.</p>

<p>Despite these obstacles I&rsquo;ve found that the ability to run an embedded test environment is a valuable addition to a project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing WireMock â€“ an HTTP service stubbing library]]></title>
    <link href="http://tomakehurst.com/blog/2012/08/18/introducing-wiremock-an-http-service-stubbing-library/"/>
    <updated>2012-08-18T13:14:45+01:00</updated>
    <id>http://tomakehurst.com/blog/2012/08/18/introducing-wiremock-an-http-service-stubbing-library</id>
    <content type="html"><![CDATA[<p><a href="http://wiremock.org">WireMock</a> is a tool that allows HTTP exchanges to be stubbed and verified. It does this by creating an actual HTTP endpoint, rather than by stubbing or mocking the HTTP client class. It can be used directly from within JUnit (or your weapon of choice), run as a standalone process or deployed into a container with the aim of covering off a wide range of testing scenarios. It has a JSON API so you don&rsquo;t have to be working in JVM language to make use of it, although there is a also a fluent
Java API available if you are.</p>

<!-- more -->


<p>Other handy stuff it&rsquo;ll do includes conditional forwarding of requests to other services (enabling proxy/intercept), record/playback of stubs, fault injection, stateful behaviour and response delays.</p>

<h2>Unit testing</h2>

<p>While it&rsquo;s possible to mock your HTTP client for unit testing with something like JMock or Mockito, I&rsquo;ve found this to be problematic in practice. For example, how will my code cope with a 503 response? What if the Content-Type header doesn&rsquo;t match the body? Does it follow redirects (or not) as expected? Using mock objects, you have to attempt to figure out how your client will react to each of these scenarios and replicate this in your mock/stub setup. Given HTTP&rsquo;s complexity, it&rsquo;s
pretty likely you&rsquo;ll get some of it wrong. This is really just an example of why you <a href="http://www.mockobjects.com/2007/04/test-smell-everything-is-mocked.html">shouldn&rsquo;t mock types you don&rsquo;t own</a>.</p>

<p>Writing unit tests with WireMock is very straightforward using the fluent Java API. If using JUnit 4.x a @Rule can be added to your test to manage the startup, shutdown and reset of the server between tests.</p>

<p>``` java
@Rule
public WireMockRule wireMockRule = new WireMockRule();</p>

<p>@Test
public void exampleTest() {</p>

<pre><code> stubFor(get(urlEqualTo("/my/resource"))
    .withHeader("Accept", equalTo("text/plain"))
       .willReturn(aResponse()
            .withStatus(200)
            .withHeader("Content-Type", "text/plain")
            .withBody("Some content")));

  Result result = myHttpServiceCallingObject.doSomething();

  assertTrue(result.wasSuccessFul());

  verify(postRequestedFor(urlMatching("/my/resource/[a-z0-9]+"))
    .withRequestBody(matching(".*1234.*"))
    .withHeader("Content-Type&amp;", notMatching("application/json")));
</code></pre>

<p>}
```</p>

<h2>Integrated testing</h2>

<p>When testing an application end to end, I&rsquo;ve found HTTP stubbing to be immensely useful. The real web services we typically have to integrate with are often slow, unreliable, unavailable in certain environments, or won&rsquo;t support automated creation of test data. Also, it&rsquo;s usually difficult to generate error responses on-demand. A consequence of these issues that I&rsquo;ve often observed is that tests at this level only cover happy paths and are very non-specific in their assertions.</p>

<p>Running all your acceptance tests against real services all the time tends to be very slow, and personally I tend to agree with Dan Bodart&rsquo;s view that <a href="http://dan.bodar.com/2012/02/28/crazy-fast-build-times-or-when-10-seconds-starts-to-make-you-nervous/">the value of tests decreases rapidly as their execution time increases</a>.</p>

<p>WireMock supports a variety of integrated testing scenarios. It can be started as a standalone process and have stubs configured via a JSON API (file and HTTP based). It can also be wrapped up in a WAR file if you&rsquo;d prefer to deploy it into an existing web container.</p>

<p>Starting WireMock standalone is as simple as this:</p>

<p>java -jar wiremock-1.24-standalone.jar</p>

<p>Then you can add some stubs via the JSON API (file or HTTP):</p>

<p>``` json
{</p>

<pre><code>"request": {
    "method": "GET",
    "urlPattern": "/some/resource/\d+"
},
"response": {
    "status": 200,
    "body": "Some content"
}
</code></pre>

<p>}
```</p>

<p>More details are available on Github: <a href="https://github.com/tomakehurst/wiremock.">https://github.com/tomakehurst/wiremock.</a> Java artifacts are available in the Maven central repo.</p>
]]></content>
  </entry>
  
</feed>
